class Solution { // using Arraylist : ll to array. then array to ll.
    public ListNode reverseList(ListNode head) {
        ArrayList<Integer> list = new ArrayList<>();
        ListNode temp = head;
        while (temp != null) {
            list.add(temp.val);
            temp = temp.next;
        }
        ListNode newHead = null;
        ListNode current = null;
        for (int i = list.size() - 1; i >= 0; i--) {
            ListNode newNode = new ListNode(list.get(i));
            if (newHead == null) {
                newHead = newNode;
                current = newHead;
            } else {
                current.next = newNode;
                current = current.next;
            }
        }

        return newHead;
    }
}

_______________________________________________________________

better approach: (Interative Method)

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null){
            ListNode front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }
}


_______________________________________________________________


OPTIMAL APPROACH: (RECURSIVE)

class Solution { // tc = 0(n), sc = 0(N)
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode newHead = reverseList(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }
}

